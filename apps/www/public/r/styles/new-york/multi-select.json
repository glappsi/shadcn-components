{
  "name": "multi-select",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "badge",
    "command"
  ],
  "files": [
    {
      "path": "glappsi/multi-select.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { X } from \"lucide-react\"\n\nimport { Badge, BadgeProps } from \"@/registry/default/ui/badge\"\nimport {\n  Command,\n  CommandGroup,\n  CommandItem,\n  CommandList,\n} from \"@/registry/default/ui/command\"\n\ntype MultiSelectItem = Record<\"value\" | \"label\", string> & {\n  readonly?: boolean\n}\n\nexport function MultiSelect({\n  items,\n  actions,\n  onValueChange,\n  onActionSelected,\n  defaultValue,\n  placeholder,\n  variant = \"secondary\",\n}: {\n  items: MultiSelectItem[]\n  actions?: MultiSelectItem[]\n  onValueChange: (value: string[]) => void\n  onActionSelected?: (value: string) => void\n  defaultValue?: string[]\n  placeholder: string\n  variant?: BadgeProps[\"variant\"]\n}) {\n  const inputRef = React.useRef<HTMLInputElement>(null)\n  const [open, setOpen] = React.useState(false)\n  const [selected, setSelected] = React.useState<MultiSelectItem[]>(\n    defaultValue\n      ? items.filter((item) => defaultValue.includes(item.value))\n      : []\n  )\n  const [inputValue, setInputValue] = React.useState(\"\")\n\n  const handleUnselect = React.useCallback(\n    (item: MultiSelectItem) => {\n      updateSelection(selected.filter((s) => s.value !== item.value))\n    },\n    [selected]\n  )\n\n  const updateSelection = React.useCallback((items: MultiSelectItem[]) => {\n    setSelected(items)\n    onValueChange(items.map((item) => item.value))\n  }, [])\n\n  const handleKeyDown = React.useCallback(\n    (e: React.KeyboardEvent<HTMLDivElement>) => {\n      const input = inputRef.current\n      if (input) {\n        if (e.key === \"Delete\" || e.key === \"Backspace\") {\n          if (input.value === \"\") {\n            setSelected((prev) => {\n              const newSelected = [...prev]\n              newSelected.pop()\n              return newSelected\n            })\n          }\n        }\n        // This is not a default behaviour of the <input /> field\n        if (e.key === \"Escape\") {\n          input.blur()\n        }\n      }\n    },\n    []\n  )\n\n  const selectables = items.filter((item) => !selected.includes(item))\n\n  return (\n    <Command\n      onKeyDown={handleKeyDown}\n      className=\"overflow-visible bg-transparent\"\n    >\n      <div className=\"group rounded-md border border-input px-3 py-2 text-sm ring-offset-background focus-within:ring-2 focus-within:ring-ring focus-within:ring-offset-2\">\n        <div className=\"flex flex-wrap gap-1\">\n          {selected.map((framework) => {\n            return (\n              <Badge key={framework.value} variant={variant}>\n                {framework.label}\n                {!framework.readonly && (\n                  <button\n                    className=\"ml-1 rounded-full outline-none ring-offset-background focus:ring-2 focus:ring-ring focus:ring-offset-2\"\n                    onKeyDown={(e) => {\n                      if (e.key === \"Enter\") {\n                        handleUnselect(framework)\n                      }\n                    }}\n                    onMouseDown={(e) => {\n                      e.preventDefault()\n                      e.stopPropagation()\n                    }}\n                    onClick={() => handleUnselect(framework)}\n                  >\n                    <X className=\"h-3 w-3 text-muted-foreground hover:text-foreground\" />\n                  </button>\n                )}\n              </Badge>\n            )\n          })}\n          {/* Avoid having the \"Search\" Icon */}\n          <CommandPrimitive.Input\n            ref={inputRef}\n            value={inputValue}\n            onValueChange={setInputValue}\n            onBlur={() => setOpen(false)}\n            onFocus={() => setOpen(true)}\n            placeholder={placeholder}\n            className=\"ml-2 flex-1 bg-transparent outline-none placeholder:text-muted-foreground\"\n          />\n        </div>\n      </div>\n      <div className=\"relative\">\n        <CommandList>\n          {open && (selectables.length > 0 || !!actions?.length) ? (\n            <div className=\"absolute top-2 z-50 max-h-[300px] w-full overflow-auto rounded-md border bg-popover text-popover-foreground shadow-md outline-none animate-in\">\n              <CommandGroup className=\"h-full overflow-auto\">\n                <>\n                  {selectables.map((item) => {\n                    return (\n                      <CommandItem\n                        key={item.value}\n                        onMouseDown={(e) => {\n                          e.preventDefault()\n                          e.stopPropagation()\n                        }}\n                        onSelect={() => {\n                          setInputValue(\"\")\n                          updateSelection([...selected, item])\n                        }}\n                        className=\"cursor-pointer\"\n                      >\n                        {item.label}\n                      </CommandItem>\n                    )\n                  })}\n                  {!!actions?.length &&\n                    actions.map((item) => {\n                      return (\n                        <CommandItem\n                          key={item.value}\n                          onMouseDown={(e) => {\n                            e.preventDefault()\n                            e.stopPropagation()\n                          }}\n                          onSelect={() => {\n                            onActionSelected?.(item.value)\n                          }}\n                          className=\"cursor-pointer bg-blue-500 italic\"\n                        >\n                          {item.label}\n                        </CommandItem>\n                      )\n                    })}\n                </>\n              </CommandGroup>\n            </div>\n          ) : null}\n        </CommandList>\n      </div>\n    </Command>\n  )\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}